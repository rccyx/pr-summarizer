import { readFileSync } from "fs";
import * as core from "@actions/core";
import { Octokit } from "@octokit/rest";
import { PRDetails } from "../types";

export class GitHubService {
  private octokit: Octokit;
  private GITHUB_TOKEN: string;
  constructor(input: { GITHUB_TOKEN: string }) {
    this.GITHUB_TOKEN = input.GITHUB_TOKEN;
    this.octokit = new Octokit({ auth: this.GITHUB_TOKEN });
  }

  async getPRDetails(): Promise<PRDetails> {
    const { repository, number } = JSON.parse(
      readFileSync(process.env.GITHUB_EVENT_PATH ?? "", "utf8")
    );

    const [prResponse, commitsResponse] = await Promise.all([
      this.octokit.pulls.get({
        owner: repository.owner.login,
        repo: repository.name,
        pull_number: number,
      }),
      this.octokit.pulls.listCommits({
        owner: repository.owner.login,
        repo: repository.name,
        pull_number: number,
      }),
    ]);

    return {
      owner: repository.owner.login,
      repo: repository.name,
      pull_number: number,
      title: prResponse.data.title ?? "",
      description: prResponse.data.body ?? "",
      author: prResponse.data.user?.login ?? "",
      commits: commitsResponse.data.map((commit) => ({
        sha: commit.sha,
        message: commit.commit.message,
      })),
    };
  }

  async getDiff(
    owner: string,
    repo: string,
    pull_number: number
  ): Promise<string | null> {
    try {
      const response = await this.octokit.pulls.get({
        owner,
        repo,
        pull_number,
        headers: {
          accept: "application/vnd.github.v3.diff",
        },
      });
      return response.data as unknown as string;
    } catch (error) {
      core.warning(
        `Error getting diff: ${
          error instanceof Error ? error.message : String(error)
        }`
      );
      return null;
    }
  }

  async createComment(
    owner: string,
    repo: string,
    pull_number: number,
    body: string,
    useAuthorIdentity: boolean = false,
    author?: string
  ): Promise<void> {
    try {
      const formattedBody = `${body}\n\n<sub>Generated by [pr-summarizer](https://github.com/rccyx/pr-summarizer)</sub>`;
      const shouldOverride = core.getInput("override_summary") === "true";

      if (useAuthorIdentity && author) {
        const pr = await this.octokit.pulls.get({
          owner,
          repo,
          pull_number,
        });

        const currentBody = pr.data.body || "";
        const updatedBody = shouldOverride
          ? formattedBody
          : formattedBody + "\n\n" + currentBody;

        await this.octokit.pulls.update({
          owner,
          repo,
          pull_number,
          body: updatedBody,
        });
      } else {
        await this.octokit.issues.createComment({
          owner,
          repo,
          issue_number: pull_number,
          body: formattedBody,
        });
      }
    } catch (error) {
      core.warning(
        `Error creating comment: ${
          error instanceof Error ? error.message : String(error)
        }`
      );
    }
  }
}

